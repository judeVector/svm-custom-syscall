name: Setup environment

inputs:
  cargo-cache-key:
    description: The key to cache cargo dependencies. Skips cargo caching if not provided.
    required: false
  cargo-cache-fallback-key:
    description: The fallback key to use when caching cargo dependencies. Default to not using a fallback key.
    required: false
  cargo-cache-local-key:
    description: The key to cache local cargo dependencies. Skips local cargo caching if not provided.
    required: false
  stable-toolchain:
    description: Install stable toolchain if `true`. Defaults to `false`.
    required: false
  nightly-toolchain:
    description: Install nightly toolchain if `true`. Defaults to `false`.
    required: false
  minimum-toolchain:
    description: Install minimum toolchain if `true`. Defaults to `false`.
    required: false
  clippy:
    description: Install Clippy if `true`. Defaults to `false`.
    required: false
  rustfmt:
    description: Install Rustfmt if `true`. Defaults to `false`.
    required: false
  miri:
    description: Install Miri if `true`. Defaults to `false`.
    required: false
  llvm-tools-preview:
    description: Install llvm-tools-preview if `true`. Defaults to `false`.
    required: false
  agave:
    description: Install required packages for Agave if `true`. Defaults to `false`.
    required: false
  purge:
    description: Purge unused directories if `true`. Defaults to `false`.
    required: false

runs:
  using: 'composite'
  steps:
    - name: Purge unused ubuntu runner directories
      if: ${{ inputs.purge == 'true' }}
      shell: bash
      run: |
        # If there are still disk space issues, try to add more packages from
        # https://github.com/jlumbroso/free-disk-space
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/share/swift
        sudo rm -rf /usr/share/mysql
        sudo rm -rf /usr/share/az_*
        sudo rm -rf /usr/share/postgresql-common
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/az
        sudo rm -rf /opt/pipx
        sudo rm -rf /opt/microsoft
        sudo rm -rf /opt/google
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/lib/heroku
        sudo rm -rf /imagegeneration
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo docker image prune --all --force

    - name: Set Environment Variables
      shell: bash
      run: |
        source ./scripts/rust-version.sh
        echo "RUST_STABLE=${rust_stable}" >> $GITHUB_ENV
        echo "RUST_MINIMUM=${rust_minimum}" >> $GITHUB_ENV
        echo "RUST_NIGHTLY=${rust_nightly}" >> $GITHUB_ENV

    - name: Install stable toolchain
      if: ${{ inputs.stable-toolchain == 'true' }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_STABLE }}

    - name: Install minimum toolchain
      if: ${{ inputs.minimum-toolchain == 'true' }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_MINIMUM }}

    - name: Install nightly toolchain
      if: ${{ inputs.nightly-toolchain == 'true' }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_NIGHTLY }}

    - name: Install Rustfmt
      if: ${{ inputs.rustfmt == 'true' }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_NIGHTLY }}
        components: rustfmt

    - name: Install Clippy
      if: ${{ inputs.clippy == 'true' }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_NIGHTLY }}
        components: clippy

    - name: Install Miri
      if: ${{ inputs.miri == 'true' }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_NIGHTLY }}
        components: miri

    - name: Install llvm-tools-preview
      if: ${{ inputs.llvm-tools-preview == 'true' }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_NIGHTLY }}
        components: llvm-tools-preview

    - name: Install Agave build dependencies
      if: ${{ inputs.agave == 'true' }}
      shell: bash
      run: sudo apt update && sudo apt install -y libudev-dev protobuf-compiler

    - name: Cache Cargo Dependencies
      if: ${{ inputs.cargo-cache-key && !inputs.cargo-cache-fallback-key }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ inputs.cargo-cache-key }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-${{ inputs.cargo-cache-key }}

    - name: Cache Cargo Dependencies With Fallback
      if: ${{ inputs.cargo-cache-key && inputs.cargo-cache-fallback-key }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ inputs.cargo-cache-key }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cargo-cache-key }}
          ${{ runner.os }}-${{ inputs.cargo-cache-fallback-key }}-${{ hashFiles('**/Cargo.lock') }}
          ${{ runner.os }}-${{ inputs.cargo-cache-fallback-key }}

    - name: Cache Local Cargo Dependencies
      if: ${{ inputs.cargo-cache-local-key }}
      uses: actions/cache@v4
      with:
        path: |
          .cargo/bin/
          .cargo/registry/index/
          .cargo/registry/cache/
          .cargo/git/db/
        key: ${{ runner.os }}-${{ inputs.cargo-cache-local-key }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-${{ inputs.cargo-cache-local-key }}
